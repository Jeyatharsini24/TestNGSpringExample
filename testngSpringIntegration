https://examples.javacodegeeks.com/enterprise-java/testng/testng-spring-integration-example/

goadl of Spring's integration in testing framework: (Spring TestContext framework)

1. Manage Spring IoC container caching between test execution.
2. Provide Dependency Injection of test fixture instances.
3. Provide transaction management appropriate to integration testing.

-In Spring 2.5 and later, unit and integration testing support is provided in the form of annotation-driven Spring TestContext framework.

-TestContextManager takes care of the test integration. But there is a layer to bind the testing framework to the Spring's integration testing framework.
This layer contains two abstract classes:
1. AbstractTestNGSpringContextTests : integrates the Spring TestContext framework with explicit ApplicationContext (protected member)
2. AbstractTransactionalTestNGSpringContextTests : (extends AbstractTestNGSpringContextTests) provides transactional support and some convenience functioanlity for
JDBC access.

Dependencies:
1. Spring-context: loading ApplicationContext
2. Spring-test: accessing Spring's testing framework
3. Spring-jdbc: JdbcTemplate and DataSource support
4. Mysql-connector-java: MySql driver
5. Testng: testing tool

Foo bean is tested:
-Foo instance is injected into test instance and its value is verified.
-The test instance goes through the Spring machinery for the dependency injection and the initialization of the test instance.
-The factory callbacks such as setBeanName, setBeanFactory and the bean post processors are applied on the test instance.

Spring loads the context and caches it by default so that once loaded the test methods can directly access it from cache ==> Improvement in performance if the beans
being loaded take time to initialize.

**********

Default behavior: Spring caches the context, so once a test method finishes its execution, the next test method to be run uses the same context as one before it.
Override this default behavior by using the @DirtiesContext. It will mark the cache as dirty and the context will be created and re-cached before execution of the next
test method.

**********

TestNG Spring transaction integration:

-run each test method within a transaction.
-default: the transaction is rolled back after the test method's execution.
this behavior can be overridden or one can explicitly commit the transaction.
-MSSQL has been used as database.

create the following table:

drop table if exists 'employee';
CREATE TABLE employee (
	  name VARCHAR(20) NOT NULL,
	  PRIMARY KEY(name)
);

INSERT INTO employee VALUES('Joe');
INSERT INTO employee VALUES('Sam');
INSERT INTO employee VALUES('John');

-Since we are going to run our test methods within a transaction, the context file should contain inject datasource and transactionManager beans.
-Schema is initialized in jdbc:initialize-database

Window -> Preferences -> Installed JRES -> A JRE which is concord with JDBC driver should be selected.